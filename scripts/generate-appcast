#! /usr/bin/env ruby

require "rubygems"
require "pathname"
require "erb"
require "json"

APPCAST_TEMPLATE_SOURCE = <<-END_OF_TEMPLATE
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title><%= product_name %> Release Notes</title>
    <link>http://spacedockapp.org/update.xml</link>
    <description>Most recent changes with links to updates.</description>
    <language>en</language>
  <% items.each do |item| %>
  <item>
    <title>Version <%= item[:version] %></title>
    <sparkle:releaseNotesLink>http://spacedockapp.org/release-notes.html</sparkle:releaseNotesLink>
    <pubDate><%= item[:date] %></pubDate>
    <enclosure
      url="http://spacedockapp.org/<%= item[:archive_name] %>"
      sparkle:version="<%= item[:build_number] %>"
      sparkle:shortVersionString="<%= item[:version] %>"
      type="application/octet-stream"
      length="<%= item[:length] %>"
    />
  </item>
  <% end %>
  </channel>
</rss>
END_OF_TEMPLATE

def create_new_version(versions, target)
  new_version = create_version_from_file target
  versions.each do |v|
    if v[:archive_name].to_s == new_version[:archive_name].to_s
      return v
    end
  end
  versions.unshift new_version
  new_version
end

def say_and_do(cmd)
  result = ""
  IO.popen (cmd) { |f| result = f.read }
  result.chomp
end

def create_version_from_file(path)
  file_version = say_and_do("xattr -p sd-version #{path}")
  build_number = say_and_do("xattr -p sd-build-number #{path}").to_i
  info = File.stat(path)
  {:version => "#{file_version} (#{build_number})", :archive_name => path.basename, :build_number=>build_number, :length => info.size}
end

product_name = "Space Dock"

beta = true

script_path = Pathname.new(File.dirname(__FILE__))
root_path = script_path.parent()
parent_path = root_path.parent()
config_path =  root_path.join("config")
doc_path =  root_path.join("doc")
release_notes_template_path = doc_path.join("release-notes.html.erb")
if beta
  release_notes_source_path = doc_path.join("beta-release-notes.md")
  index_template_source = doc_path.join("mac_beta.html.erb")
else
  release_notes_source_path = doc_path.join("release-notes.md")
  index_template_source = doc_path.join("index.html.erb")
end
site_path =  root_path.join("spacedocksite")
release_notes_dest_path = site_path.join("release-notes.html")
release_notes_temp_path = "/tmp/release-notes.html"
if beta
  index_dest_path = site_path.join("mac_beta.html")
else
  index_dest_path = site_path.join("index.html")
end
versions_path = config_path.join("versions.json")
update_path = site_path.join("update.xml")

versions = []

update_xml_path = site_path.join("update.xml")

if File.exists? versions_path
  versions_text = File.read(versions_path)
  if versions_text.length > 0
    versions = JSON.parse(versions_text, :symbolize_names => true)
  end
end

new_release = ARGV[0]
unless new_release
  new_release = Pathname.new(site_path.join("space_dock_b45.zip"))
else
  new_release = Pathname.new(new_release).realpath
end

create_new_version(versions, new_release)

items = versions

unless beta
  appcast_template = ERB.new APPCAST_TEMPLATE_SOURCE
  File.write(update_path, appcast_template.result(binding))
  File.write(versions_path, versions.to_json())
  say_and_do("kramdown --template #{release_notes_template_path} #{release_notes_source_path} > #{release_notes_dest_path}")
end
say_and_do("kramdown #{release_notes_source_path} > #{release_notes_temp_path}")
release_notes = File.read(release_notes_temp_path)
index_template_source = File.read(index_template_source)
index_template = ERB.new index_template_source
max_build_number = versions[0][:build_number]
File.write(index_dest_path, index_template.result(binding))
